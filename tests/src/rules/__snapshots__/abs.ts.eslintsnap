# eslint-snapshot-rule-tester format: v1


Test: abs >> invalid
Filename: abs/invalid/abs/aggressive/type-input.js
Options:
  - prefer: Math.abs
    aggressive: true

Code:
  1 | /* abs/invalid/abs/aggressive/type-input.js */
  2 | const n = -5;
  3 | /* ✓ GOOD */
  4 | x = Math.abs(n);
  5 |
  6 | /* ✗ BAD */
  7 | x = n < 0 ? -n : n;
    |     ^~~~~~~~~~~~~~ [1]
  8 | x = n < 0 ? n * -1 : n;
    |     ^~~~~~~~~~~~~~~~~~ [2]
  9 |
 10 | /* ✗ BAD */
 11 | x = unknown < 0 ? -unknown : unknown;
    |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [3]
 12 | /* ✗ BAD */
 13 | x = unknown < 0 ? unknown * -1 : unknown;
    |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [4]
 14 |
 15 | const b = -5n;
 16 |
 17 | /* Ignore */
 18 | x = b < 0 ? -b : b;
 19 | /* ✗ BAD */
 20 | x = b < 0 ? b * -1 : b; // TypeError
    |     ^~~~~~~~~~~~~~~~~~ [5]
 21 |

Output:
  1 | /* abs/invalid/abs/aggressive/type-input.js */
  2 | const n = -5;
  3 | /* ✓ GOOD */
  4 | x = Math.abs(n);
  5 |
  6 | /* ✗ BAD */
  7 | x = Math.abs(n);
  8 | x = Math.abs(n);
  9 |
 10 | /* ✗ BAD */
 11 | x = unknown < 0 ? -unknown : unknown;
 12 | /* ✗ BAD */
 13 | x = Math.abs(unknown);
 14 |
 15 | const b = -5n;
 16 |
 17 | /* Ignore */
 18 | x = b < 0 ? -b : b;
 19 | /* ✗ BAD */
 20 | x = Math.abs(b); // TypeError
 21 |

[1] Can use 'Math.abs(n)' instead of n < 0 ? -n : n.
[2] Can use 'Math.abs(n)' instead of n < 0 ? n * -1 : n.
[3] Can use 'Math.abs(unknown)' instead of unknown < 0 ? -unknown : unknown.
    Suggestions:
      - Replace using 'Math.abs(unknown)'.
        Output:
          1 | /* abs/invalid/abs/aggressive/type-input.js */
          2 | const n = -5;
          3 | /* ✓ GOOD */
          4 | x = Math.abs(n);
          5 |
          6 | /* ✗ BAD */
          7 | x = n < 0 ? -n : n;
          8 | x = n < 0 ? n * -1 : n;
          9 |
         10 | /* ✗ BAD */
         11 | x = Math.abs(unknown);
         12 | /* ✗ BAD */
         13 | x = unknown < 0 ? unknown * -1 : unknown;
         14 |
         15 | const b = -5n;
         16 |
         17 | /* Ignore */
         18 | x = b < 0 ? -b : b;
         19 | /* ✗ BAD */
         20 | x = b < 0 ? b * -1 : b; // TypeError
         21 |
[4] Can use 'Math.abs(unknown)' instead of unknown < 0 ? unknown * -1 : unknown.
[5] Can use 'Math.abs(b)' instead of b < 0 ? b * -1 : b.
---


Test: abs >> invalid
Filename: abs/invalid/abs/comment-input.js
Options:
  - prefer: Math.abs

Code:
  1 | /* abs/invalid/abs/comment-input.js */
  2 | x = n < 0 /* comment */ ? n * -1 : n;
    |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [1]
  3 |

Output: unchanged

[1] Can use 'Math.abs(n)' instead of n < 0 ? n * -1 : n.
    Suggestions:
      - Replace using 'Math.abs(n)'.
        Output:
          1 | /* abs/invalid/abs/comment-input.js */
          2 | x = Math.abs(n);
          3 |
---


Test: abs >> invalid
Filename: abs/invalid/abs/example-input.js
Options:
  - prefer: Math.abs

Code:
  1 | /* abs/invalid/abs/example-input.js */
  2 | /* ✓ GOOD */
  3 | x = Math.abs(n);
  4 |
  5 | /* ✗ BAD */
  6 | x = n < 0 ? n * -1 : n;
    |     ^~~~~~~~~~~~~~~~~~ [1]
  7 |

Output:
  1 | /* abs/invalid/abs/example-input.js */
  2 | /* ✓ GOOD */
  3 | x = Math.abs(n);
  4 |
  5 | /* ✗ BAD */
  6 | x = Math.abs(n);
  7 |

[1] Can use 'Math.abs(n)' instead of n < 0 ? n * -1 : n.
---


Test: abs >> invalid
Filename: abs/invalid/abs/type-input.js
Options:
  - prefer: Math.abs

Code:
  1 | /* abs/invalid/abs/type-input.js */
  2 | const n = -5;
  3 | /* ✓ GOOD */
  4 | x = Math.abs(n);
  5 |
  6 | /* ✗ BAD */
  7 | x = n < 0 ? -n : n;
    |     ^~~~~~~~~~~~~~ [1]
  8 | x = n < 0 ? n * -1 : n;
    |     ^~~~~~~~~~~~~~~~~~ [2]
  9 |
 10 | /* Ignore */
 11 | x = unknown < 0 ? -unknown : unknown;
 12 | /* ✗ BAD */
 13 | x = unknown < 0 ? unknown * -1 : unknown;
    |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [3]
 14 |
 15 | const b = -5n;
 16 |
 17 | /* Ignore */
 18 | x = b < 0 ? -b : b;
 19 | /* ✗ BAD */
 20 | x = b < 0 ? b * -1 : b; // TypeError
    |     ^~~~~~~~~~~~~~~~~~ [4]
 21 |

Output:
  1 | /* abs/invalid/abs/type-input.js */
  2 | const n = -5;
  3 | /* ✓ GOOD */
  4 | x = Math.abs(n);
  5 |
  6 | /* ✗ BAD */
  7 | x = Math.abs(n);
  8 | x = Math.abs(n);
  9 |
 10 | /* Ignore */
 11 | x = unknown < 0 ? -unknown : unknown;
 12 | /* ✗ BAD */
 13 | x = Math.abs(unknown);
 14 |
 15 | const b = -5n;
 16 |
 17 | /* Ignore */
 18 | x = b < 0 ? -b : b;
 19 | /* ✗ BAD */
 20 | x = Math.abs(b); // TypeError
 21 |

[1] Can use 'Math.abs(n)' instead of n < 0 ? -n : n.
[2] Can use 'Math.abs(n)' instead of n < 0 ? n * -1 : n.
[3] Can use 'Math.abs(unknown)' instead of unknown < 0 ? unknown * -1 : unknown.
[4] Can use 'Math.abs(b)' instead of b < 0 ? b * -1 : b.
---


Test: abs >> invalid
Filename: abs/invalid/expression/comment-input.js
Options:
  - prefer: expression

Code:
  1 | /* abs/invalid/expression/comment-input.js */
  2 | x = Math.abs(/* comment */ n);
    |     ^~~~~~~~~~~~~~~~~~~~~~~~~ [1]
  3 | x = n < 0 /* comment */ ? n * -1 : n;
    |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [2]
  4 |

Output: unchanged

[1] Can use 'n < 0 ? -n : n' instead of Math.abs(n).
    Suggestions:
      - Replace using 'n < 0 ? -n : n'.
        Output:
          1 | /* abs/invalid/expression/comment-input.js */
          2 | x = n < 0 ? -n : n;
          3 | x = n < 0 /* comment */ ? n * -1 : n;
          4 |
[2] Can use 'n < 0 ? -n : n' instead of n < 0 ? n * -1 : n.
    Suggestions:
      - Replace using 'n < 0 ? -n : n'.
        Output:
          1 | /* abs/invalid/expression/comment-input.js */
          2 | x = Math.abs(/* comment */ n);
          3 | x = n < 0 ? -n : n;
          4 |
---


Test: abs >> invalid
Filename: abs/invalid/expression/example-input.js
Options:
  - prefer: expression

Code:
  1 | /* abs/invalid/expression/example-input.js */
  2 | /* ✓ GOOD */
  3 | x = n < 0 ? -n : n;
  4 |
  5 | /* ✗ BAD */
  6 | x = Math.abs(n);
    |     ^~~~~~~~~~~ [1]
  7 | x = n < 0 ? n * -1 : n;
    |     ^~~~~~~~~~~~~~~~~~ [2]
  8 |

Output:
  1 | /* abs/invalid/expression/example-input.js */
  2 | /* ✓ GOOD */
  3 | x = n < 0 ? -n : n;
  4 |
  5 | /* ✗ BAD */
  6 | x = n < 0 ? -n : n;
  7 | x = n < 0 ? -n : n;
  8 |

[1] Can use 'n < 0 ? -n : n' instead of Math.abs(n).
[2] Can use 'n < 0 ? -n : n' instead of n < 0 ? n * -1 : n.
---


Test: abs >> invalid
Filename: abs/invalid/expression/precedence1-input.js
Options:
  - prefer: expression

Code:
  1 | /* abs/invalid/expression/precedence1-input.js */
  2 | /* {} */
  3 | x = +Math.abs(n);
    |      ^~~~~~~~~~~ [1]
  4 | x = -Math.abs(n);
    |      ^~~~~~~~~~~ [2]
  5 | x = !Math.abs(n);
    |      ^~~~~~~~~~~ [3]
  6 | x = typeof Math.abs(n);
    |            ^~~~~~~~~~~ [4]
  7 | x = void Math.abs(n);
    |          ^~~~~~~~~~~ [5]
  8 | x = Math.abs(n).toString();
    |     ^~~~~~~~~~~ [6]
  9 | x = Math.abs(n)();
    |     ^~~~~~~~~~~ [7]
 10 | x = Math.abs(n)``;
    |     ^~~~~~~~~~~ [8]
 11 |

Output:
  1 | /* abs/invalid/expression/precedence1-input.js */
  2 | /* {} */
  3 | x = +(n < 0 ? -n : n);
  4 | x = -(n < 0 ? -n : n);
  5 | x = !(n < 0 ? -n : n);
  6 | x = typeof (n < 0 ? -n : n);
  7 | x = void (n < 0 ? -n : n);
  8 | x = (n < 0 ? -n : n).toString();
  9 | x = (n < 0 ? -n : n)();
 10 | x = (n < 0 ? -n : n)``;
 11 |

[1] Can use 'n < 0 ? -n : n' instead of Math.abs(n).
[2] Can use 'n < 0 ? -n : n' instead of Math.abs(n).
[3] Can use 'n < 0 ? -n : n' instead of Math.abs(n).
[4] Can use 'n < 0 ? -n : n' instead of Math.abs(n).
[5] Can use 'n < 0 ? -n : n' instead of Math.abs(n).
[6] Can use 'n < 0 ? -n : n' instead of Math.abs(n).
[7] Can use 'n < 0 ? -n : n' instead of Math.abs(n).
[8] Can use 'n < 0 ? -n : n' instead of Math.abs(n).
---


Test: abs >> invalid
Filename: abs/invalid/expression/precedence2-input.js
Options:
  - prefer: expression

Code:
  1 | /* abs/invalid/expression/precedence2-input.js */
  2 | /* {} */
  3 | x = class extends Math.abs(n) {};
    |                   ^~~~~~~~~~~ [1]
  4 |

Output:
  1 | /* abs/invalid/expression/precedence2-input.js */
  2 | /* {} */
  3 | x = class extends (n < 0 ? -n : n) {};
  4 |

[1] Can use 'n < 0 ? -n : n' instead of Math.abs(n).
---


Test: abs >> invalid
Filename: abs/invalid/expression/within-class-input.js
Options:
  - prefer: expression

Code:
  1 | /* abs/invalid/expression/within-class-input.js */
  2 | /* {} */
  3 |
  4 | class A extends Math.abs(n) {}
    |                 ^~~~~~~~~~~ [1]
  5 |

Output:
  1 | /* abs/invalid/expression/within-class-input.js */
  2 | /* {} */
  3 |
  4 | class A extends (n < 0 ? -n : n) {}
  5 |

[1] Can use 'n < 0 ? -n : n' instead of Math.abs(n).
---
