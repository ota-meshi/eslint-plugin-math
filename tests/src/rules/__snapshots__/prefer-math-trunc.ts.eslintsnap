# eslint-snapshot-rule-tester format: v1


Test: prefer-math-trunc >> invalid
Filename: prefer-math-trunc/invalid/bitwise-input.js

Code:
  1 | /*prefer-math-trunc/invalid/bitwise-input.js*/
  2 | x = ~~n;
    |     ^~~ [1]
  3 | x = n & -1;
    |     ^~~~~~ [2]
  4 | x = n | 0;
    |     ^~~~~ [3]
  5 | x = n ^ 0;
    |     ^~~~~ [4]
  6 | x = n >> 0;
    |     ^~~~~~ [5]
  7 | x = n << 0;
    |     ^~~~~~ [6]
  8 |
  9 | x = -1 & n;
    |     ^~~~~~ [7]
 10 | x = 0 | n;
    |     ^~~~~ [8]
 11 | x = 0 ^ n;
    |     ^~~~~ [9]
 12 | x = 0 >> n;
 13 | x = 0 << n;
 14 |

Output:
  1 | /*prefer-math-trunc/invalid/bitwise-input.js*/
  2 | x = Math.trunc(n);
  3 | x = Math.trunc(n);
  4 | x = Math.trunc(n);
  5 | x = Math.trunc(n);
  6 | x = Math.trunc(n);
  7 | x = Math.trunc(n);
  8 |
  9 | x = Math.trunc(n);
 10 | x = Math.trunc(n);
 11 | x = Math.trunc(n);
 12 | x = 0 >> n;
 13 | x = 0 << n;
 14 |

[1] Can use 'Math.trunc(n)' instead of '~~n'.
[2] Can use 'Math.trunc(n)' instead of 'n & -1'.
[3] Can use 'Math.trunc(n)' instead of 'n | 0'.
[4] Can use 'Math.trunc(n)' instead of 'n ^ 0'.
[5] Can use 'Math.trunc(n)' instead of 'n >> 0'.
[6] Can use 'Math.trunc(n)' instead of 'n << 0'.
[7] Can use 'Math.trunc(n)' instead of 'n & n'.
[8] Can use 'Math.trunc(n)' instead of 'n | n'.
[9] Can use 'Math.trunc(n)' instead of 'n ^ n'.
---


Test: prefer-math-trunc >> invalid
Filename: prefer-math-trunc/invalid/comment-input.js

Code:
  1 | /*prefer-math-trunc/invalid/comment-input.js*/
  2 | x = n >= 0 ? Math.floor(n) /* x */ : Math.ceil(n);
    |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [1]
  3 | x = ~~(/* x */ n);
    |     ^~~~~~~~~~~~~ [2]
  4 | x = n /* x */ & -1;
    |     ^~~~~~~~~~~~~~ [3]
  5 | x = n /* x */ | 0;
    |     ^~~~~~~~~~~~~ [4]
  6 | x = n /* x */ ^ 0;
    |     ^~~~~~~~~~~~~ [5]
  7 | x = n /* x */ >> 0;
    |     ^~~~~~~~~~~~~~ [6]
  8 |

Output: unchanged

[1] Can use 'Math.trunc(n)', instead of branching on value and using 'Math.floor(n)' / 'Math.ceil(n)'.
    Suggestions:
      - Replace using 'Math.trunc(n)'.
        Output:
          1 | /*prefer-math-trunc/invalid/comment-input.js*/
          2 | x = Math.trunc(n);
          3 | x = ~~(/* x */ n);
          4 | x = n /* x */ & -1;
          5 | x = n /* x */ | 0;
          6 | x = n /* x */ ^ 0;
          7 | x = n /* x */ >> 0;
          8 |
[2] Can use 'Math.trunc(n)' instead of '~~n'.
    Suggestions:
      - Replace using 'Math.trunc(n)'.
        Output:
          1 | /*prefer-math-trunc/invalid/comment-input.js*/
          2 | x = n >= 0 ? Math.floor(n) /* x */ : Math.ceil(n);
          3 | x = Math.trunc(n);
          4 | x = n /* x */ & -1;
          5 | x = n /* x */ | 0;
          6 | x = n /* x */ ^ 0;
          7 | x = n /* x */ >> 0;
          8 |
[3] Can use 'Math.trunc(n)' instead of 'n & -1'.
    Suggestions:
      - Replace using 'Math.trunc(n)'.
        Output:
          1 | /*prefer-math-trunc/invalid/comment-input.js*/
          2 | x = n >= 0 ? Math.floor(n) /* x */ : Math.ceil(n);
          3 | x = ~~(/* x */ n);
          4 | x = Math.trunc(n);
          5 | x = n /* x */ | 0;
          6 | x = n /* x */ ^ 0;
          7 | x = n /* x */ >> 0;
          8 |
[4] Can use 'Math.trunc(n)' instead of 'n | 0'.
    Suggestions:
      - Replace using 'Math.trunc(n)'.
        Output:
          1 | /*prefer-math-trunc/invalid/comment-input.js*/
          2 | x = n >= 0 ? Math.floor(n) /* x */ : Math.ceil(n);
          3 | x = ~~(/* x */ n);
          4 | x = n /* x */ & -1;
          5 | x = Math.trunc(n);
          6 | x = n /* x */ ^ 0;
          7 | x = n /* x */ >> 0;
          8 |
[5] Can use 'Math.trunc(n)' instead of 'n ^ 0'.
    Suggestions:
      - Replace using 'Math.trunc(n)'.
        Output:
          1 | /*prefer-math-trunc/invalid/comment-input.js*/
          2 | x = n >= 0 ? Math.floor(n) /* x */ : Math.ceil(n);
          3 | x = ~~(/* x */ n);
          4 | x = n /* x */ & -1;
          5 | x = n /* x */ | 0;
          6 | x = Math.trunc(n);
          7 | x = n /* x */ >> 0;
          8 |
[6] Can use 'Math.trunc(n)' instead of 'n >> 0'.
    Suggestions:
      - Replace using 'Math.trunc(n)'.
        Output:
          1 | /*prefer-math-trunc/invalid/comment-input.js*/
          2 | x = n >= 0 ? Math.floor(n) /* x */ : Math.ceil(n);
          3 | x = ~~(/* x */ n);
          4 | x = n /* x */ & -1;
          5 | x = n /* x */ | 0;
          6 | x = n /* x */ ^ 0;
          7 | x = Math.trunc(n);
          8 |
---


Test: prefer-math-trunc >> invalid
Filename: prefer-math-trunc/invalid/conditional-input.js

Code:
  1 | /*prefer-math-trunc/invalid/conditional-input.js*/
  2 | x = n >= 0 ? Math.floor(n) : Math.ceil(n);
    |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [1]
  3 | x = n > 0 ? Math.floor(n) : Math.ceil(n);
    |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [2]
  4 | x = n < 0 ? Math.ceil(n) : Math.floor(n);
    |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [3]
  5 | x = n <= 0 ? Math.ceil(n) : Math.floor(n);
    |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [4]
  6 |

Output:
  1 | /*prefer-math-trunc/invalid/conditional-input.js*/
  2 | x = Math.trunc(n);
  3 | x = Math.trunc(n);
  4 | x = Math.trunc(n);
  5 | x = Math.trunc(n);
  6 |

[1] Can use 'Math.trunc(n)', instead of branching on value and using 'Math.floor(n)' / 'Math.ceil(n)'.
[2] Can use 'Math.trunc(n)', instead of branching on value and using 'Math.floor(n)' / 'Math.ceil(n)'.
[3] Can use 'Math.trunc(n)', instead of branching on value and using 'Math.floor(n)' / 'Math.ceil(n)'.
[4] Can use 'Math.trunc(n)', instead of branching on value and using 'Math.floor(n)' / 'Math.ceil(n)'.
---


Test: prefer-math-trunc >> invalid
Filename: prefer-math-trunc/invalid/example-input.js

Code:
  1 | /*prefer-math-trunc/invalid/example-input.js*/
  2 | /* ✓ GOOD */
  3 | x = Math.trunc(n);
  4 |
  5 | /* ✗ BAD */
  6 | x = n >= 0 ? Math.floor(n) : Math.ceil(n);
    |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [1]
  7 | // Not strictly equivalent to Math.trunc(n).
  8 | x = ~~n;
    |     ^~~ [2]
  9 | x = n & -1;
    |     ^~~~~~ [3]
 10 | x = n | 0;
    |     ^~~~~ [4]
 11 | x = n ^ 0;
    |     ^~~~~ [5]
 12 | x = n >> 0;
    |     ^~~~~~ [6]
 13 |

Output:
  1 | /*prefer-math-trunc/invalid/example-input.js*/
  2 | /* ✓ GOOD */
  3 | x = Math.trunc(n);
  4 |
  5 | /* ✗ BAD */
  6 | x = Math.trunc(n);
  7 | // Not strictly equivalent to Math.trunc(n).
  8 | x = Math.trunc(n);
  9 | x = Math.trunc(n);
 10 | x = Math.trunc(n);
 11 | x = Math.trunc(n);
 12 | x = Math.trunc(n);
 13 |

[1] Can use 'Math.trunc(n)', instead of branching on value and using 'Math.floor(n)' / 'Math.ceil(n)'.
[2] Can use 'Math.trunc(n)' instead of '~~n'.
[3] Can use 'Math.trunc(n)' instead of 'n & -1'.
[4] Can use 'Math.trunc(n)' instead of 'n | 0'.
[5] Can use 'Math.trunc(n)' instead of 'n ^ 0'.
[6] Can use 'Math.trunc(n)' instead of 'n >> 0'.
---


Test: prefer-math-trunc >> invalid
Filename: prefer-math-trunc/invalid/if-block-input.js

Code:
  1 | /*prefer-math-trunc/invalid/if-block-input.js*/
  2 | let x, y;
  3 | if (n >= 0) {
  4 |   console.log("foo");
  5 |   x = Math.floor(n);
  6 | } else {
  7 |   x = Math.ceil(n);
  8 | }
  9 | if (n >= 0) {
    | ^~~~~~~~~~~~~\ [1]
 10 |   {
    | ~~~\ [1]
 11 |     console.log("foo");
    | ~~~~~~~~~~~~~~~~~~~~~~~\ [1]
 12 |     x = Math.floor(n);
    | ~~~~~~~~~~~~~~~~~~~~~~\ [1]
 13 |   }
    | ~~~\ [1]
 14 | } else {
    | ~~~~~~~~\ [1]
 15 |   // prettier-ignore
    | ~~~~~~~~~~~~~~~~~~~~\ [1]
 16 |   { 
    | ~~~~\ [1]
 17 |     console.log("foo"); x = Math.ceil(n);
    | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ [1]
 18 |   }
    | ~~~\ [1]
 19 | }
    | ~ [1]
 20 | if (n >= 0) {
    | ^~~~~~~~~~~~~\ [2]
 21 |   const foo = 42;
    | ~~~~~~~~~~~~~~~~~\ [2]
 22 |   x = Math.floor(n);
    | ~~~~~~~~~~~~~~~~~~~~\ [2]
 23 |   console.log(x, foo);
    | ~~~~~~~~~~~~~~~~~~~~~~\ [2]
 24 | } else {
    | ~~~~~~~~\ [2]
 25 |   const foo = 42;
    | ~~~~~~~~~~~~~~~~~\ [2]
 26 |   x = Math.ceil(n);
    | ~~~~~~~~~~~~~~~~~~~\ [2]
 27 |   console.log(x, foo);
    | ~~~~~~~~~~~~~~~~~~~~~~\ [2]
 28 | }
    | ~ [2]
 29 | if (n >= 0) {
    | ^~~~~~~~~~~~~\ [3]
 30 |   let y = 42;
    | ~~~~~~~~~~~~~\ [3]
 31 |   x = Math.floor(n);
    | ~~~~~~~~~~~~~~~~~~~~\ [3]
 32 |   console.log(x, y);
    | ~~~~~~~~~~~~~~~~~~~~\ [3]
 33 | } else {
    | ~~~~~~~~\ [3]
 34 |   let y = 42;
    | ~~~~~~~~~~~~~\ [3]
 35 |   x = Math.ceil(n);
    | ~~~~~~~~~~~~~~~~~~~\ [3]
 36 |   console.log(x, y);
    | ~~~~~~~~~~~~~~~~~~~~\ [3]
 37 | }
    | ~ [3]
 38 |

Output:
  1 | /*prefer-math-trunc/invalid/if-block-input.js*/
  2 | let x, y;
  3 | if (n >= 0) {
  4 |   console.log("foo");
  5 |   x = Math.floor(n);
  6 | } else {
  7 |   x = Math.ceil(n);
  8 | }
  9 | if (n >= 0) {
 10 |   {
 11 |     console.log("foo");
 12 |     x = Math.floor(n);
 13 |   }
 14 | } else {
 15 |   // prettier-ignore
 16 |   { 
 17 |     console.log("foo"); x = Math.ceil(n);
 18 |   }
 19 | }
 20 |
 21 |   const foo = 42;
 22 |   x = Math.trunc(n);
 23 |   console.log(x, foo);
 24 |
 25 | if (n >= 0) {
 26 |   let y = 42;
 27 |   x = Math.floor(n);
 28 |   console.log(x, y);
 29 | } else {
 30 |   let y = 42;
 31 |   x = Math.ceil(n);
 32 |   console.log(x, y);
 33 | }
 34 |

[1] Can use 'Math.trunc(n)', instead of branching on value and using 'Math.floor(n)' / 'Math.ceil(n)'.
    Suggestions:
      - Replace using 'Math.trunc(n)'.
        Output:
          1 | /*prefer-math-trunc/invalid/if-block-input.js*/
          2 | let x, y;
          3 | if (n >= 0) {
          4 |   console.log("foo");
          5 |   x = Math.floor(n);
          6 | } else {
          7 |   x = Math.ceil(n);
          8 | }
          9 |
         10 |   {
         11 |     console.log("foo");
         12 |     x = Math.trunc(n);
         13 |   }
         14 |
         15 | if (n >= 0) {
         16 |   const foo = 42;
         17 |   x = Math.floor(n);
         18 |   console.log(x, foo);
         19 | } else {
         20 |   const foo = 42;
         21 |   x = Math.ceil(n);
         22 |   console.log(x, foo);
         23 | }
         24 | if (n >= 0) {
         25 |   let y = 42;
         26 |   x = Math.floor(n);
         27 |   console.log(x, y);
         28 | } else {
         29 |   let y = 42;
         30 |   x = Math.ceil(n);
         31 |   console.log(x, y);
         32 | }
         33 |
[2] Can use 'Math.trunc(n)', instead of branching on value and using 'Math.floor(n)' / 'Math.ceil(n)'.
[3] Can use 'Math.trunc(n)', instead of branching on value and using 'Math.floor(n)' / 'Math.ceil(n)'.
    Suggestions:
      - Replace using 'Math.trunc(n)'.
        Output:
          1 | /*prefer-math-trunc/invalid/if-block-input.js*/
          2 | let x, y;
          3 | if (n >= 0) {
          4 |   console.log("foo");
          5 |   x = Math.floor(n);
          6 | } else {
          7 |   x = Math.ceil(n);
          8 | }
          9 | if (n >= 0) {
         10 |   {
         11 |     console.log("foo");
         12 |     x = Math.floor(n);
         13 |   }
         14 | } else {
         15 |   // prettier-ignore
         16 |   { 
         17 |     console.log("foo"); x = Math.ceil(n);
         18 |   }
         19 | }
         20 | if (n >= 0) {
         21 |   const foo = 42;
         22 |   x = Math.floor(n);
         23 |   console.log(x, foo);
         24 | } else {
         25 |   const foo = 42;
         26 |   x = Math.ceil(n);
         27 |   console.log(x, foo);
         28 | }
         29 |
         30 |   let y = 42;
         31 |   x = Math.trunc(n);
         32 |   console.log(x, y);
         33 |
         34 |
---


Test: prefer-math-trunc >> invalid
Filename: prefer-math-trunc/invalid/if-input.js

Code:
  1 | /*prefer-math-trunc/invalid/if-input.js*/
  2 | if (n >= 0) {
    | ^~~~~~~~~~~~~\ [1]
  3 |   x = Math.floor(n);
    | ~~~~~~~~~~~~~~~~~~~~\ [1]
  4 | } else {
    | ~~~~~~~~\ [1]
  5 |   x = Math.ceil(n);
    | ~~~~~~~~~~~~~~~~~~~\ [1]
  6 | }
    | ~ [1]
  7 | if (n > 0) {
    | ^~~~~~~~~~~~\ [2]
  8 |   x = Math.floor(n);
    | ~~~~~~~~~~~~~~~~~~~~\ [2]
  9 | } else {
    | ~~~~~~~~\ [2]
 10 |   x = Math.ceil(n);
    | ~~~~~~~~~~~~~~~~~~~\ [2]
 11 | }
    | ~ [2]
 12 | if (n <= 0) {
    | ^~~~~~~~~~~~~\ [3]
 13 |   x = Math.ceil(n);
    | ~~~~~~~~~~~~~~~~~~~\ [3]
 14 | } else {
    | ~~~~~~~~\ [3]
 15 |   x = Math.floor(n);
    | ~~~~~~~~~~~~~~~~~~~~\ [3]
 16 | }
    | ~ [3]
 17 | if (n < 0) {
    | ^~~~~~~~~~~~\ [4]
 18 |   x = Math.ceil(n);
    | ~~~~~~~~~~~~~~~~~~~\ [4]
 19 | } else {
    | ~~~~~~~~\ [4]
 20 |   x = Math.floor(n);
    | ~~~~~~~~~~~~~~~~~~~~\ [4]
 21 | }
    | ~ [4]
 22 | if (0 <= n) {
    | ^~~~~~~~~~~~~\ [5]
 23 |   x = Math.floor(n);
    | ~~~~~~~~~~~~~~~~~~~~\ [5]
 24 | } else {
    | ~~~~~~~~\ [5]
 25 |   x = Math.ceil(n);
    | ~~~~~~~~~~~~~~~~~~~\ [5]
 26 | }
    | ~ [5]
 27 | if (0 < n) {
    | ^~~~~~~~~~~~\ [6]
 28 |   x = Math.floor(n);
    | ~~~~~~~~~~~~~~~~~~~~\ [6]
 29 | } else {
    | ~~~~~~~~\ [6]
 30 |   x = Math.ceil(n);
    | ~~~~~~~~~~~~~~~~~~~\ [6]
 31 | }
    | ~ [6]
 32 | if (0 >= n) {
    | ^~~~~~~~~~~~~\ [7]
 33 |   x = Math.ceil(n);
    | ~~~~~~~~~~~~~~~~~~~\ [7]
 34 | } else {
    | ~~~~~~~~\ [7]
 35 |   x = Math.floor(n);
    | ~~~~~~~~~~~~~~~~~~~~\ [7]
 36 | }
    | ~ [7]
 37 | if (0 > n) {
    | ^~~~~~~~~~~~\ [8]
 38 |   x = Math.ceil(n);
    | ~~~~~~~~~~~~~~~~~~~\ [8]
 39 | } else {
    | ~~~~~~~~\ [8]
 40 |   x = Math.floor(n);
    | ~~~~~~~~~~~~~~~~~~~~\ [8]
 41 | }
    | ~ [8]
 42 |

Output:
  1 | /*prefer-math-trunc/invalid/if-input.js*/
  2 |
  3 |   x = Math.trunc(n);
  4 |
  5 |
  6 |   x = Math.trunc(n);
  7 |
  8 |
  9 |   x = Math.trunc(n);
 10 |
 11 |
 12 |   x = Math.trunc(n);
 13 |
 14 |
 15 |   x = Math.trunc(n);
 16 |
 17 |
 18 |   x = Math.trunc(n);
 19 |
 20 |
 21 |   x = Math.trunc(n);
 22 |
 23 |
 24 |   x = Math.trunc(n);
 25 |
 26 |

[1] Can use 'Math.trunc(n)', instead of branching on value and using 'Math.floor(n)' / 'Math.ceil(n)'.
[2] Can use 'Math.trunc(n)', instead of branching on value and using 'Math.floor(n)' / 'Math.ceil(n)'.
[3] Can use 'Math.trunc(n)', instead of branching on value and using 'Math.floor(n)' / 'Math.ceil(n)'.
[4] Can use 'Math.trunc(n)', instead of branching on value and using 'Math.floor(n)' / 'Math.ceil(n)'.
[5] Can use 'Math.trunc(n)', instead of branching on value and using 'Math.floor(n)' / 'Math.ceil(n)'.
[6] Can use 'Math.trunc(n)', instead of branching on value and using 'Math.floor(n)' / 'Math.ceil(n)'.
[7] Can use 'Math.trunc(n)', instead of branching on value and using 'Math.floor(n)' / 'Math.ceil(n)'.
[8] Can use 'Math.trunc(n)', instead of branching on value and using 'Math.floor(n)' / 'Math.ceil(n)'.
---


Test: prefer-math-trunc >> invalid
Filename: prefer-math-trunc/invalid/if-without-block-input.js

Code:
  1 | /*prefer-math-trunc/invalid/if-without-block-input.js*/
  2 | if (n >= 0) x = Math.floor(n);
    | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ [1]
  3 | else x = Math.ceil(n);
    | ~~~~~~~~~~~~~~~~~~~~~~ [1]
  4 |
  5 | if (n > 0) x = Math.floor(n);
    | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ [2]
  6 | else x = Math.ceil(n);
    | ~~~~~~~~~~~~~~~~~~~~~~ [2]
  7 |
  8 | if (n <= 0) x = Math.ceil(n);
    | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ [3]
  9 | else x = Math.floor(n);
    | ~~~~~~~~~~~~~~~~~~~~~~~ [3]
 10 |
 11 | if (n < 0) x = Math.ceil(n);
    | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\ [4]
 12 | else x = Math.floor(n);
    | ~~~~~~~~~~~~~~~~~~~~~~~ [4]
 13 |

Output:
  1 | /*prefer-math-trunc/invalid/if-without-block-input.js*/
  2 | x = Math.trunc(n);
  3 |
  4 | x = Math.trunc(n);
  5 |
  6 | x = Math.trunc(n);
  7 |
  8 | x = Math.trunc(n);
  9 |

[1] Can use 'Math.trunc(n)', instead of branching on value and using 'Math.floor(n)' / 'Math.ceil(n)'.
[2] Can use 'Math.trunc(n)', instead of branching on value and using 'Math.floor(n)' / 'Math.ceil(n)'.
[3] Can use 'Math.trunc(n)', instead of branching on value and using 'Math.floor(n)' / 'Math.ceil(n)'.
[4] Can use 'Math.trunc(n)', instead of branching on value and using 'Math.floor(n)' / 'Math.ceil(n)'.
---
