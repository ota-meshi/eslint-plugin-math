# eslint-snapshot-rule-tester format: v1


Test: prefer-number-is-integer >> invalid
Filename: prefer-number-is-integer/invalid/comment-input.js

Code:
  1 | /*prefer-number-is-integer/invalid/comment-input.js*/
  2 | x = Math.floor(n) /* x */ === n;
    |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~ [1]
  3 | x = Math.ceil(n) /* x */ === n;
    |     ^~~~~~~~~~~~~~~~~~~~~~~~~~ [2]
  4 | x = Math.trunc(n) /* x */ === n;
    |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~ [3]
  5 |

Output: unchanged

[1] Can use 'Number.isInteger(n)' instead of 'Math.floor(n) === n'.
    Suggestions:
      - Replace using 'Number.isInteger()'.
        Output:
          1 | /*prefer-number-is-integer/invalid/comment-input.js*/
          2 | x = Number.isInteger(n);
          3 | x = Math.ceil(n) /* x */ === n;
          4 | x = Math.trunc(n) /* x */ === n;
          5 |
[2] Can use 'Number.isInteger(n)' instead of 'Math.ceil(n) === n'.
    Suggestions:
      - Replace using 'Number.isInteger()'.
        Output:
          1 | /*prefer-number-is-integer/invalid/comment-input.js*/
          2 | x = Math.floor(n) /* x */ === n;
          3 | x = Number.isInteger(n);
          4 | x = Math.trunc(n) /* x */ === n;
          5 |
[3] Can use 'Number.isInteger(n)' instead of 'Math.trunc(n) === n'.
    Suggestions:
      - Replace using 'Number.isInteger()'.
        Output:
          1 | /*prefer-number-is-integer/invalid/comment-input.js*/
          2 | x = Math.floor(n) /* x */ === n;
          3 | x = Math.ceil(n) /* x */ === n;
          4 | x = Number.isInteger(n);
          5 |
---


Test: prefer-number-is-integer >> invalid
Filename: prefer-number-is-integer/invalid/example-input.js

Code:
  1 | /*prefer-number-is-integer/invalid/example-input.js*/
  2 | /* ✓ GOOD */
  3 | x = Number.isInteger(n);
  4 |
  5 | /* ✗ BAD */
  6 | x = Math.floor(n) === n;
    |     ^~~~~~~~~~~~~~~~~~~ [1]
  7 | x = Math.ceil(n) === n;
    |     ^~~~~~~~~~~~~~~~~~ [2]
  8 | x = Math.trunc(n) === n;
    |     ^~~~~~~~~~~~~~~~~~~ [3]
  9 | x = Math.round(n) === n;
    |     ^~~~~~~~~~~~~~~~~~~ [4]
 10 |
 11 | x = parseInt(n, 10) === n;
    |     ^~~~~~~~~~~~~~~~~~~~~ [5]
 12 | x = Number.parseInt(n, 10) === n;
    |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~ [6]
 13 |

Output:
  1 | /*prefer-number-is-integer/invalid/example-input.js*/
  2 | /* ✓ GOOD */
  3 | x = Number.isInteger(n);
  4 |
  5 | /* ✗ BAD */
  6 | x = Number.isInteger(n);
  7 | x = Number.isInteger(n);
  8 | x = Number.isInteger(n);
  9 | x = Number.isInteger(n);
 10 |
 11 | x = Number.isInteger(n);
 12 | x = Number.isInteger(n);
 13 |

[1] Can use 'Number.isInteger(n)' instead of 'Math.floor(n) === n'.
[2] Can use 'Number.isInteger(n)' instead of 'Math.ceil(n) === n'.
[3] Can use 'Number.isInteger(n)' instead of 'Math.trunc(n) === n'.
[4] Can use 'Number.isInteger(n)' instead of 'Math.round(n) === n'.
[5] Can use 'Number.isInteger(n)' instead of 'parseInt(n) === n'.
[6] Can use 'Number.isInteger(n)' instead of 'parseInt(n) === n'.
---


Test: prefer-number-is-integer >> invalid
Filename: prefer-number-is-integer/invalid/math-trunc-like-input.js

Code:
  1 | /*prefer-number-is-integer/invalid/math-trunc-like-input.js*/
  2 | x = ~~n === n;
    |     ^~~~~~~~~ [1]
  3 | x = (n & -1) === n;
    |     ^~~~~~~~~~~~~~ [2]
  4 | x = (n | 0) === n;
    |     ^~~~~~~~~~~~~ [3]
  5 | x = (n ^ 0) === n;
    |     ^~~~~~~~~~~~~ [4]
  6 | x = n >> 0 === n;
    |     ^~~~~~~~~~~~ [5]
  7 |

Output:
  1 | /*prefer-number-is-integer/invalid/math-trunc-like-input.js*/
  2 | x = Number.isInteger(n);
  3 | x = Number.isInteger(n);
  4 | x = Number.isInteger(n);
  5 | x = Number.isInteger(n);
  6 | x = Number.isInteger(n);
  7 |

[1] Can use 'Number.isInteger(n)' instead of 'Math.trunc(n) === n' like expression.
[2] Can use 'Number.isInteger(n)' instead of 'Math.trunc(n) === n' like expression.
[3] Can use 'Number.isInteger(n)' instead of 'Math.trunc(n) === n' like expression.
[4] Can use 'Number.isInteger(n)' instead of 'Math.trunc(n) === n' like expression.
[5] Can use 'Number.isInteger(n)' instead of 'Math.trunc(n) === n' like expression.
---


Test: prefer-number-is-integer >> invalid
Filename: prefer-number-is-integer/invalid/modulo-input.js

Code:
  1 | /*prefer-number-is-integer/invalid/modulo-input.js*/
  2 | z = n % 1 ? a : b;
    |     ^~~~~ [1]
  3 | x = !(n % 1);
    |     ^~~~~~~~ [2]
  4 | x = n % 1 === 0;
    |     ^~~~~~~~~~~ [3]
  5 | x = n % 1 !== 0;
    |     ^~~~~~~~~~~ [4]
  6 | x = Boolean(n % 1);
    |     ^~~~~~~~~~~~~~ [5]
  7 |
  8 | if (n % 1) {
    |     ^~~~~ [6]
  9 |   // do something
 10 | }
 11 | while (n % 1) {
    |        ^~~~~ [7]
 12 |   // do something
 13 | }
 14 | do {
 15 |   // do something
 16 | } while (n % 1);
    |          ^~~~~ [8]
 17 | for (; n % 1; ) {
    |        ^~~~~ [9]
 18 |   // do something
 19 | }
 20 |

Output:
  1 | /*prefer-number-is-integer/invalid/modulo-input.js*/
  2 | z = !Number.isInteger(n) ? a : b;
  3 | x = Number.isInteger(n);
  4 | x = Number.isInteger(n);
  5 | x = !Number.isInteger(n);
  6 | x = !Number.isInteger(n);
  7 |
  8 | if (!Number.isInteger(n)) {
  9 |   // do something
 10 | }
 11 | while (!Number.isInteger(n)) {
 12 |   // do something
 13 | }
 14 | do {
 15 |   // do something
 16 | } while (!Number.isInteger(n));
 17 | for (; !Number.isInteger(n); ) {
 18 |   // do something
 19 | }
 20 |

[1] Can use '!Number.isInteger(n)' instead of 'n % 1 === 0'.
[2] Can use 'Number.isInteger(n)' instead of 'n % 1 !== 0'.
[3] Can use 'Number.isInteger(n)' instead of 'n % 1 !== 0'.
[4] Can use '!Number.isInteger(n)' instead of 'n % 1 === 0'.
[5] Can use '!Number.isInteger(n)' instead of 'n % 1 === 0'.
[6] Can use '!Number.isInteger(n)' instead of 'n % 1 === 0'.
[7] Can use '!Number.isInteger(n)' instead of 'n % 1 === 0'.
[8] Can use '!Number.isInteger(n)' instead of 'n % 1 === 0'.
[9] Can use '!Number.isInteger(n)' instead of 'n % 1 === 0'.
---


Test: prefer-number-is-integer >> invalid
Filename: prefer-number-is-integer/invalid/not-input.js

Code:
  1 | /*prefer-number-is-integer/invalid/not-input.js*/
  2 | x = Math.floor(n) !== n;
    |     ^~~~~~~~~~~~~~~~~~~ [1]
  3 | x = Math.ceil(n) !== n;
    |     ^~~~~~~~~~~~~~~~~~ [2]
  4 | x = Math.trunc(n) !== n;
    |     ^~~~~~~~~~~~~~~~~~~ [3]
  5 | x = Math.round(n) !== n;
    |     ^~~~~~~~~~~~~~~~~~~ [4]
  6 |
  7 | x = parseInt(n, 10) !== n;
    |     ^~~~~~~~~~~~~~~~~~~~~ [5]
  8 | x = Number.parseInt(n, 10) !== n;
    |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~ [6]
  9 |

Output:
  1 | /*prefer-number-is-integer/invalid/not-input.js*/
  2 | x = !Number.isInteger(n);
  3 | x = !Number.isInteger(n);
  4 | x = !Number.isInteger(n);
  5 | x = !Number.isInteger(n);
  6 |
  7 | x = !Number.isInteger(n);
  8 | x = !Number.isInteger(n);
  9 |

[1] Can use '!Number.isInteger(n)' instead of 'Math.floor(n) !== n'.
[2] Can use '!Number.isInteger(n)' instead of 'Math.ceil(n) !== n'.
[3] Can use '!Number.isInteger(n)' instead of 'Math.trunc(n) !== n'.
[4] Can use '!Number.isInteger(n)' instead of 'Math.round(n) !== n'.
[5] Can use '!Number.isInteger(n)' instead of 'parseInt(n) !== n'.
[6] Can use '!Number.isInteger(n)' instead of 'parseInt(n) !== n'.
---
